<%
const { config, utils} = it;
const { _ } = utils;

const client = config.apiClassName;
const authExtensionEnabled = config.authExtensionEnabled;
const capitalizedClient = _.capitalize(client);
%>

import { API_PATH } from "../constants";
import type { RequestParams } from "./http-client";
import { <%~ capitalizedClient %> } from "./<%~ capitalizedClient %>";
<% if (authExtensionEnabled) { %>
import { auth } from "app/auth";
<% } %>

const isLocalhost = /localhost:\d{4}/i.test(window.location.origin);

const constructBaseUrl = (): string => {
  if (isLocalhost) {
    return `${window.location.origin}${API_PATH}`;
  }

  return `https://api.databutton.com${API_PATH}`;
};

type BaseApiParams = Omit<RequestParams, "signal" | "baseUrl" | "cancelToken">;

const constructBaseApiParams = (): BaseApiParams => {
  return {
    credentials: "include",
    <% if (authExtensionEnabled) { %>
    secure: true,
    <% } %>
  };
};

const constructClient = () => {
  const baseUrl = constructBaseUrl();
  const baseApiParams = constructBaseApiParams();

  return new <%~ capitalizedClient %>({
    baseUrl,
    baseApiParams,
    <% if (authExtensionEnabled) { %>
    securityWorker: async () => {
      return {
        headers: {
          "Authorization": await auth.getAuthHeaderValue()
        }
      }
    },
    <% } %>
  });
}

const <%~ client %> = constructClient();

export default <%~ client %>;
